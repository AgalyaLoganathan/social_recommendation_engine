As we have seen above, generics give the impression that a new container type is created with each different type parameter. We have also seen that in addition to the normal type checking, the type parameter has to match as well when we assign generics variables. In some cases this is too restrictive. What if we would like to relax this additional checking? What if we would like to define a collection variable that can hold any generic collection, regardless of the parameter type it holds? The wildcard type is represented by the character <?>, and pronounced Unknown, or Any-Type. Any-Type can be expressed also by <? extends Object>. Any-Type includes Interfaces, not only Classes. So now we can define a collection whose element type matches anything. See below:
<br>Code section 4.39: Wildcard type.
<br>1 Collection<?> collUnknown;
<br>Upper bounded wildcards[edit]
<br>You can specify a restriction on the types of classes that may be used. For example, <? extends ClassName> only allows objects of class ClassName or a subclass. For example, to create a collection that may only contain "Serializable" objects, specify:
<br>Code section 4.40: Collection of serializable subobjects.
<br>1 Collection<String> textColl = new ArrayList<String>();
<br>2
<br>3 Collection<? extends Serializable> serColl = textColl;
<br>The above code is valid because the String class is serializable. Use of a class that is not serializable would cause a compilation error. The added items can be retrieved as Serializable object. You can call methods of the Serializable interface or cast it to String. The following collection can only contain objects that extend the class Animal.
<br>Code listing 4.38: Dog.java
<br>1 class Dog extends Animal {
<br>2 }
<br>Code section 4.41: Example of subclass.
<br>1 // Create "Animal Collection" variable
<br>2 Collection<? extends Animal> animalColl = new ArrayList<Dog>();
<br>Lower bounded wildcards[edit]
<br><? super ClassName> specifies a restriction on the types of classes that may be used. For example, to declare a Comparator that can compare Dogs, you use:
<br>Code section 4.42: Superclass.
<br>1 Comparator<? super Dog> myComparator;
<br>Now suppose you define a comparator that can compare Animals:
<br>Code section 4.43: Comparator.
<br>1 class AnimalComparator implements Comparator<Animal> {
<br>2   int compare(Animal a, Animal b) {
<br>3    //...
<br>4   }
<br>5 }
<br>Since Dogs are Animals, you can use this comparator to compare Dogs also. Comparators for any superclass of Dog can also compare Dog; but comparators for any strict subclass cannot.
<br>Code section 4.44: Generic comparator.
<br>1 Comparator<Animal> myAnimalComparator = new AnimalComparator();
<br>2
<br>3 static int compareTwoDogs(Comparator<? super Dog> comp, Dog dog1, Dog dog2) {
<br>4   return comp.compare(dog1, dog2);
<br>5 }
<br>The above code is valid because the Animal class is a supertype of the Dog class. Use of a class that is not a supertype would cause a compilation error.
Unbounded wildcard[edit]
The advantage of the unbounded wildcard (i.e. <?>) compared to a raw type (i.e. without generic) is to explicitly say that the parameterized type is unknown, not any type. That way, all the operations that implies to know the type are forbidden to avoid unsafe operation. Consider the following code:
<br>Code section 4.45: Unsafe operation.
<br>1 public void addAtBottom(Collection anyCollection) {
<br>2   anyCollection.add(new Integer(1));
<br>3 }
<br>This code will compile but this code may corrupt the collection if the <br>collection only contains strings:
<br>Code section 4.46: Corruption of list.
<br>1 List<String> col = new ArrayList<String>();
<br>2 addAtBottom(col);
<br>3 col.get(0).endsWith(".");
<br>
<br> Console for Code section 4.46
<br>Exception in thread "main" java.lang.ClassCastException: java.lang.Integer <br>incompatible with java.lang.String
<br>at Example.main(Example.java:17)
<br>This situation could have been avoided if the addAtBottom(Collection) method was defined with an unbounded wildcard: addAtBottom(Collection<?>). With this signature, it is impossible to compile a code that is dependent of the parameterized type. Only independent methods of a collection (clear(), isEmpty(), iterator(), remove(Object o), size(), ...) can be called. For instance, addAtBottom(Collection<?>) could contain the following code:
<br>Code section 4.47: Safe operation.
<br>1 public void addAtBottom(Collection<?> anyCollection) {
<br>2    Iterator<?> iterator = anyCollection.iterator();
<br>3    while (iterator.hasNext()) {
<br>4       System.out.print(iterator.next());
<br>5    }
<br>6 }
<br>
