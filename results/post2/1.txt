You can create a Locale with any combination of valid language and country codes, but that doesn't mean that you can use it. Remember, a Locale object is only an identifier. You pass the Locale object to other objects, which then do the real work. These other objects, which we call locale-sensitive, do not know how to deal with all possible Locale definitions. To find out which types of Locale definitions a locale-sensitive class recognizes, you invoke the getAvailableLocales method. For example, to find out which Locale definitions are supported by the DateFormat class, you could write a routine such as the following:
<br>import java.util.*;
<br>import java.text.*;
<br>
<br>public class Available {
<br>    static public void main(String[] args) {
<br>        Locale list[] = DateFormat.getAvailableLocales();
<br>        for (Locale aLocale : list) {
<br>            System.out.println(aLocale.toString());
<br>        }
<br>    }
<br>}
<br> Note that the String returned by toString contains the language and country codes, separated by an underscore:
<br>ar_EG
<br>be_BY
<br>bg_BG
<br>ca_ES
<br>cs_CZ
<br>da_DK
<br>de_DE
<br>...
<br> If you want to display a list of Locale names to end users, you should show them something easier to understand than the language and country codes returned by toString. Instead you can invoke the Locale.getDisplayName method, which retrieves a localized String of a Locale object. For example, when toString is replaced by getDisplayName in the preceding code, the program prints the following lines:
<br>Arabic (Egypt)
<br>Belarussian (Belarus)
<br>Bulgarian (Bulgaria)
<br>Catalan (Spain)
<br>Czech (Czech Republic)
<br>Danish (Denmark)
<br>German (Germany)
<br>...
<br> You may see different locale lists depending on the Java Platform implementations.