Method overriding is related dynamic linking, or runtime binding. In order for the Method Overriding to work, the method call that is going to be called can not be determined at compilation time. It will be decided at runtime, and will be looked up in a table.
<br>Code section 4.31: Runtime binding.
<br> 1 MyClass obj;
<br> 2
<br> 3 if (new java.util.Calendar().get(java.util.Calendar.AM_PM) == java.util.<br>Calendar.AM) {
<br> 4   // Executed a morning
<br> 5   obj = new SubOfMyClass();
<br> 6 } else {
<br> 7   // Executed an afternoon
<br> 8   obj = new MyClass();
<br> 9 }
<br>10
<br>11 obj.myMethod();
<br>In the code section 4.31, the expression at line 3 is true if it is executed a morning and false if it is executed an afternoon. Thus, the instance of obj will be a MyClass or a SubOfMyClass depending on the execution time. So it is impossible to determine the method address at compile time. Because the obj reference can point to object and all its sub object, and that will be known only at runtime, a table is kept with all the possible method addresses to be called. Do not confuse:
<br>Code section 4.32: Declared type and instantiated type.
<br>1 obj.myMethod(myParameter);
<br>The implementation of this method is searched using the instantiated type of the called object (obj) and the declared type of the parameter object (myParameter).
Also another rule is that when you do an override, the visibility of the new method that overrides the super class method can not be reduced. The visibility can be increased, however. So if the super class method visibility is public, the override method can not be package, or private. An override method must throw the same exceptions as the super class, or their subexceptions.
super references to the parent class (i.e. super.someMethod()). It can be used in a subclass to access inherited methods that the subclass has overridden or inherited fields that the subclass has hidden.
A common mistake to think that if we can override methods, we could also override member variables. This is not the case, as it is useless. You can redefine a variable that is private in the super class as such a variable is not visible.
