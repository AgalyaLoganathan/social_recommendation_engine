Because of the role of constructors in the language, fewer modifiers are meaningful than for methods: Access modifiers: public, protected, and private Annotations The ConstructorAccess example searches for constructors in a given class with the specified access modifier. It also displays whether the constructor is synthetic (compiler-generated) or of variable arity.
<br>
<br>import java.lang.reflect.Constructor;
<br>import java.lang.reflect.Modifier;
<br>import java.lang.reflect.Type;
<br>import static java.lang.System.out;
<br>
<br>public class ConstructorAccess {
<br>    public static void main(String... args) {
<br>  try {
<br>      Class<?> c = Class.forName(args[0]);
<br>      Constructor[] allConstructors = c.getDeclaredConstructors();
<br>      for (Constructor ctor : allConstructors) {
<br>    int searchMod = modifierFromString(args[1]);
<br>    int mods = accessModifiers(ctor.getModifiers());
<br>    if (searchMod == mods) {
<br>        out.format("%s%n", ctor.toGenericString());
<br>        out.format("  [ synthetic=%-5b var_args=%-5b ]%n",
<br>             ctor.isSynthetic(), ctor.isVarArgs());
<br>    }
<br>      }
<br>
<br>        // production code should handle this exception more gracefully
<br>  } catch (ClassNotFoundException x) {
<br>      x.printStackTrace();
<br>  }
<br>    }
<br>
<br>    private static int accessModifiers(int m) {
<br>  return m & (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED);
<br>    }
<br>
<br>    private static int modifierFromString(String s) {
<br>  if ("public".equals(s))               return Modifier.PUBLIC;
<br>  else if ("protected".equals(s))       return Modifier.PROTECTED;
<br>  else if ("private".equals(s))         return Modifier.PRIVATE;
<br>  else if ("package-private".equals(s)) return 0;
<br>  else return -1;
<br>    }
<br>}
<br> There is not an explicit Modifier constant which corresponds to "package-private" access, so it is necessary to check for the absence of all three access modifiers to identify a package-private constructor. This output shows the private constructors in java.io.File:
<br>$ java ConstructorAccess java.io.File private
<br>private java.io.File(java.lang.String,int)
<br>  [ synthetic=false var_args=false ]
<br>private java.io.File(java.lang.String,java.io.File)
<br>  [ synthetic=false var_args=false ]
<br> Synthetic constructors are rare; however the SyntheticConstructor example illustrates a typical situation where this may occur:

<br>public class SyntheticConstructor {
<br>    private SyntheticConstructor() {}
<br>    class Inner {
<br>  // Compiler will generate a synthetic constructor since
<br>  // SyntheticConstructor() is private.
<br>  Inner() { new SyntheticConstructor(); }
<br>    }
<br>}
<br>
<br>$ java ConstructorAccess SyntheticConstructor package-private
<br>SyntheticConstructor(SyntheticConstructor$1)
<br>  [ synthetic=true  var_args=false ]
<br> Since the inner class's constructor references the private constructor of the enclosing class, the compiler must generate a package-private constructor. The parameter type SyntheticConstructor$1 is arbitrary and dependent on the compiler implementation. Code which depends on the presence of any synthetic or non-public class members may not be portable. Constructors implement java.lang.reflect.AnnotatedElement, which provides methods to retrieve runtime annotations with java.lang.annotation.RetentionPolicy.RUNTIME. For an example of obtaining annotations see the Examining Class Modifiers and Types section.
